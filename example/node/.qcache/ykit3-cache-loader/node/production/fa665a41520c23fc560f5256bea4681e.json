{"remainingRequest":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/history/esm/history.js","dependencies":[{"path":"/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/history/esm/history.js","hash":"88b53e89d10d17a9de4bd7559151c930"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}