{"remainingRequest":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/axios/lib/adapters/xhr.js","dependencies":[{"path":"/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/axios/lib/adapters/xhr.js","hash":"d1ddf1743fe9d0c28534897b1b848e33"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}