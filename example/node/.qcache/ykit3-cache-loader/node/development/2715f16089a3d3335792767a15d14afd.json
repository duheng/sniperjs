{"remainingRequest":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/to-no-case/index.js","dependencies":[{"path":"/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/to-no-case/index.js","hash":"21e2d36f18550cbcd286ef2dfef996cc"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKLyoqCiAqIEV4cG9ydC4KICovCm1vZHVsZS5leHBvcnRzID0gdG9Ob0Nhc2U7Ci8qKgogKiBUZXN0IHdoZXRoZXIgYSBzdHJpbmcgaXMgY2FtZWwtY2FzZS4KICovCgp2YXIgaGFzU3BhY2UgPSAvXHMvOwp2YXIgaGFzU2VwYXJhdG9yID0gLyhffC18XC58OikvOwp2YXIgaGFzQ2FtZWwgPSAvKFthLXpdW0EtWl18W0EtWl1bYS16XSkvOwovKioKICogUmVtb3ZlIGFueSBzdGFydGluZyBjYXNlIGZyb20gYSBgc3RyaW5nYCwgbGlrZSBjYW1lbCBvciBzbmFrZSwgYnV0IGtlZXAKICogc3BhY2VzIGFuZCBwdW5jdHVhdGlvbiB0aGF0IG1heSBiZSBpbXBvcnRhbnQgb3RoZXJ3aXNlLgogKgogKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nCiAqIEByZXR1cm4ge1N0cmluZ30KICovCgpmdW5jdGlvbiB0b05vQ2FzZShzdHJpbmcpIHsKICBpZiAoaGFzU3BhY2UudGVzdChzdHJpbmcpKSByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKCk7CiAgaWYgKGhhc1NlcGFyYXRvci50ZXN0KHN0cmluZykpIHJldHVybiAodW5zZXBhcmF0ZShzdHJpbmcpIHx8IHN0cmluZykudG9Mb3dlckNhc2UoKTsKICBpZiAoaGFzQ2FtZWwudGVzdChzdHJpbmcpKSByZXR1cm4gdW5jYW1lbGl6ZShzdHJpbmcpLnRvTG93ZXJDYXNlKCk7CiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpOwp9Ci8qKgogKiBTZXBhcmF0b3Igc3BsaXR0ZXIuCiAqLwoKCnZhciBzZXBhcmF0b3JTcGxpdHRlciA9IC9bXFdfXSsoLnwkKS9nOwovKioKICogVW4tc2VwYXJhdGUgYSBgc3RyaW5nYC4KICoKICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZwogKiBAcmV0dXJuIHtTdHJpbmd9CiAqLwoKZnVuY3Rpb24gdW5zZXBhcmF0ZShzdHJpbmcpIHsKICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uoc2VwYXJhdG9yU3BsaXR0ZXIsIGZ1bmN0aW9uIChtLCBuZXh0KSB7CiAgICByZXR1cm4gbmV4dCA/ICcgJyArIG5leHQgOiAnJzsKICB9KTsKfQovKioKICogQ2FtZWxjYXNlIHNwbGl0dGVyLgogKi8KCgp2YXIgY2FtZWxTcGxpdHRlciA9IC8oLikoW0EtWl0rKS9nOwovKioKICogVW4tY2FtZWxjYXNlIGEgYHN0cmluZ2AuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcKICogQHJldHVybiB7U3RyaW5nfQogKi8KCmZ1bmN0aW9uIHVuY2FtZWxpemUoc3RyaW5nKSB7CiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGNhbWVsU3BsaXR0ZXIsIGZ1bmN0aW9uIChtLCBwcmV2aW91cywgdXBwZXJzKSB7CiAgICByZXR1cm4gcHJldmlvdXMgKyAnICcgKyB1cHBlcnMudG9Mb3dlckNhc2UoKS5zcGxpdCgnJykuam9pbignICcpOwogIH0pOwp9"},{"version":3,"sources":["/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/to-no-case/index.js"],"names":["module","exports","toNoCase","hasSpace","hasSeparator","hasCamel","string","test","toLowerCase","unseparate","uncamelize","separatorSplitter","replace","m","next","camelSplitter","previous","uppers","split","join"],"mappings":";;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,YAAY,GAAG,YAAnB;AACA,IAAIC,QAAQ,GAAG,yBAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,QAAT,CAAkBI,MAAlB,EAA0B;AACxB,MAAIH,QAAQ,CAACI,IAAT,CAAcD,MAAd,CAAJ,EAA2B,OAAOA,MAAM,CAACE,WAAP,EAAP;AAC3B,MAAIJ,YAAY,CAACG,IAAb,CAAkBD,MAAlB,CAAJ,EAA+B,OAAO,CAACG,UAAU,CAACH,MAAD,CAAV,IAAsBA,MAAvB,EAA+BE,WAA/B,EAAP;AAC/B,MAAIH,QAAQ,CAACE,IAAT,CAAcD,MAAd,CAAJ,EAA2B,OAAOI,UAAU,CAACJ,MAAD,CAAV,CAAmBE,WAAnB,EAAP;AAC3B,SAAOF,MAAM,CAACE,WAAP,EAAP;AACD;AAED;AACA;AACA;;;AAEA,IAAIG,iBAAiB,GAAG,cAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,UAAT,CAAoBH,MAApB,EAA4B;AAC1B,SAAOA,MAAM,CAACM,OAAP,CAAeD,iBAAf,EAAkC,UAAUE,CAAV,EAAaC,IAAb,EAAmB;AAC1D,WAAOA,IAAI,GAAG,MAAMA,IAAT,GAAgB,EAA3B;AACD,GAFM,CAAP;AAGD;AAED;AACA;AACA;;;AAEA,IAAIC,aAAa,GAAG,cAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASL,UAAT,CAAoBJ,MAApB,EAA4B;AAC1B,SAAOA,MAAM,CAACM,OAAP,CAAeG,aAAf,EAA8B,UAAUF,CAAV,EAAaG,QAAb,EAAuBC,MAAvB,EAA+B;AAClE,WAAOD,QAAQ,GAAG,GAAX,GAAiBC,MAAM,CAACT,WAAP,GAAqBU,KAArB,CAA2B,EAA3B,EAA+BC,IAA/B,CAAoC,GAApC,CAAxB;AACD,GAFM,CAAP;AAGD","sourcesContent":["\n/**\n * Export.\n */\n\nmodule.exports = toNoCase\n\n/**\n * Test whether a string is camel-case.\n */\n\nvar hasSpace = /\\s/\nvar hasSeparator = /(_|-|\\.|:)/\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/\n\n/**\n * Remove any starting case from a `string`, like camel or snake, but keep\n * spaces and punctuation that may be important otherwise.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toNoCase(string) {\n  if (hasSpace.test(string)) return string.toLowerCase()\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()\n  return string.toLowerCase()\n}\n\n/**\n * Separator splitter.\n */\n\nvar separatorSplitter = /[\\W_]+(.|$)/g\n\n/**\n * Un-separate a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction unseparate(string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : ''\n  })\n}\n\n/**\n * Camelcase splitter.\n */\n\nvar camelSplitter = /(.)([A-Z]+)/g\n\n/**\n * Un-camelcase a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction uncamelize(string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ')\n  })\n}\n"]}]}