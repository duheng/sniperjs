{"remainingRequest":"/Users/qitmac001131/Desktop/work/ykit3/packages/ykit3-config-resolver/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/qitmac001131/Desktop/test/sniperjs/example/node/node_modules/core-js/modules/_array-reduce.js","dependencies":[{"path":"/Users/qitmac001131/Desktop/test/sniperjs/example/node/node_modules/core-js/modules/_array-reduce.js","hash":"f4fedc28d7a324cd394157073854f8f0"},{"path":"/Users/qitmac001131/Desktop/work/ykit3/packages/ykit3-config-resolver/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/Users/qitmac001131/Desktop/work/ykit3/packages/ykit3-config-resolver/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTsKCnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpOwoKdmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7Cgp2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHsKICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7CiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTsKICB2YXIgc2VsZiA9IElPYmplY3QoTyk7CiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7CiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxOwogIGlmIChhTGVuIDwgMikgZm9yICg7OykgewogICAgaWYgKGluZGV4IGluIHNlbGYpIHsKICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdOwogICAgICBpbmRleCArPSBpOwogICAgICBicmVhazsKICAgIH0KCiAgICBpbmRleCArPSBpOwoKICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7CiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgfQogIH0KCiAgZm9yICg7IGlzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIHsKICAgIGlmIChpbmRleCBpbiBzZWxmKSB7CiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7CiAgICB9CiAgfQoKICByZXR1cm4gbWVtbzsKfTs="},{"version":3,"sources":["/Users/qitmac001131/Desktop/test/sniperjs/example/node/node_modules/core-js/modules/_array-reduce.js"],"names":["aFunction","require","toObject","IObject","toLength","module","exports","that","callbackfn","aLen","memo","isRight","O","self","length","index","i","TypeError"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAtB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiD;AAChEX,EAAAA,SAAS,CAACQ,UAAD,CAAT;AACA,MAAII,CAAC,GAAGV,QAAQ,CAACK,IAAD,CAAhB;AACA,MAAIM,IAAI,GAAGV,OAAO,CAACS,CAAD,CAAlB;AACA,MAAIE,MAAM,GAAGV,QAAQ,CAACQ,CAAC,CAACE,MAAH,CAArB;AACA,MAAIC,KAAK,GAAGJ,OAAO,GAAGG,MAAM,GAAG,CAAZ,GAAgB,CAAnC;AACA,MAAIE,CAAC,GAAGL,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAAvB;AACA,MAAIF,IAAI,GAAG,CAAX,EAAc,SAAS;AACrB,QAAIM,KAAK,IAAIF,IAAb,EAAmB;AACjBH,MAAAA,IAAI,GAAGG,IAAI,CAACE,KAAD,CAAX;AACAA,MAAAA,KAAK,IAAIC,CAAT;AACA;AACD;;AACDD,IAAAA,KAAK,IAAIC,CAAT;;AACA,QAAIL,OAAO,GAAGI,KAAK,GAAG,CAAX,GAAeD,MAAM,IAAIC,KAApC,EAA2C;AACzC,YAAME,SAAS,CAAC,6CAAD,CAAf;AACD;AACF;;AACD,SAAMN,OAAO,GAAGI,KAAK,IAAI,CAAZ,GAAgBD,MAAM,GAAGC,KAAtC,EAA6CA,KAAK,IAAIC,CAAtD;AAAyD,QAAID,KAAK,IAAIF,IAAb,EAAmB;AAC1EH,MAAAA,IAAI,GAAGF,UAAU,CAACE,IAAD,EAAOG,IAAI,CAACE,KAAD,CAAX,EAAoBA,KAApB,EAA2BH,CAA3B,CAAjB;AACD;AAFD;;AAGA,SAAOF,IAAP;AACD,CAtBD","sourcesContent":["var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n"]}]}