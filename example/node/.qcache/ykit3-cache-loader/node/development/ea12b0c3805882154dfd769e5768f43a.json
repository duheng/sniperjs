{"remainingRequest":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/path-to-regexp/index.js","dependencies":[{"path":"/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/path-to-regexp/index.js","hash":"4afea22c036e29c0b8da09ebb37df753"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/cache-loader-hash/dist/cjs.js","hash":"d62e2d390167bf8193569f1644327c55"},{"path":"/Users/Aaron/Desktop/work/qunar/work/ykit3/packages/ykit3-cli/node_modules/babel-loader/lib/index.js","hash":"19adf3159c902f1ed7907f3931384270"}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Aaron/Desktop/work/qunar/work/sniperjs/example/node/node_modules/path-to-regexp/index.js"],"names":["isarray","require","module","exports","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","res","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","encodeAsterisk","matches","Array","i","flags","obj","opts","data","encode","pretty","encodeURIComponent","token","value","segment","TypeError","JSON","stringify","j","test","attachKeys","re","keys","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","regexp","stringToRegexp","strict","end","route","endsWithDelimiter"],"mappings":"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","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]}]}